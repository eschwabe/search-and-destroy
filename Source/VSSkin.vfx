/*******************************************************************************
* Game Development Project
* Vertex Skinning Shader
*
* Eric Schwabe
* 2010-02-20
*
*******************************************************************************/

/**
* CONSTANTS
*/
float4x4 matWorldViewProj   : register(c0);	// transposed by game
float4x4 matBones[10]       : register(c4); // transposed by game

/**
* INPUT
*/
struct VS_INPUT
{
    float3 position		    : POSITION;
    float3 normal		    : NORMAL;
    float4 diffuse		    : COLOR0;    
    float4 blendWeights     : BLENDWEIGHT;
    float4 blendIndices     : BLENDINDICES;
};

/**
* OUTPUT
*/
struct VS_OUTPUT
{
    float4 position		: POSITION;		// vertex position
    float4 diffuse		: COLOR0;		// diffuse color
    float4 worldNormal	: TEXCOORD0;	// world normal
};

/**
* MAIN
*/
void main(VS_INPUT input, out VS_OUTPUT output)
{
	// zero output
	output = (VS_OUTPUT)0;

    // convert vectors
    float4 vPos = float4( input.position.xyz, 1.0f );
    float4 vNormal = float4( input.normal.xyz, 1.0f );

    // transform position by bone matrices and weights
    float4 vTransPos = (float4)0;
    int iBone1Index = (int)input.blendIndices[0];
    int iBone2Index = (int)input.blendIndices[1];
    int iBone3Index = (int)input.blendIndices[2];
    float fBone1Weight = input.blendWeights[0];
    float fBone2Weight = input.blendWeights[1];
    float fBone3Weight = input.blendWeights[2];
    vTransPos += mul( vPos, matBones[iBone1Index] ) * fBone1Weight;
    vTransPos += mul( vPos, matBones[iBone2Index] ) * fBone2Weight;
    vTransPos += mul( vPos, matBones[iBone3Index] ) * fBone3Weight;

    // transform normal by bone matrices and weights
    float4 vTransNormal = (float4)0;
    vTransNormal += mul( vNormal, matBones[iBone1Index] ) * fBone1Weight;
    vTransNormal += mul( vNormal, matBones[iBone2Index] ) * fBone2Weight;
    vTransNormal += mul( vNormal, matBones[iBone3Index] ) * fBone3Weight;
    output.worldNormal = normalize( vTransNormal );

    // transform position by world-view-projection
    output.position = mul( vTransPos, matWorldViewProj );

	// pass through colors
	output.diffuse = input.diffuse;
}
